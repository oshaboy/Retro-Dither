#!/usr/bin/python3

from argparse import ArgumentParser
from math import floor
from PIL import Image

import os
import math

ErrorToRight = 7/16
ErrorToBottomRight=1/16
ErrorToBottomLeft=3/16
ErrorToBottom=5/16
isfunk=False
nes_palette = [
    (0x7C,0x7C,0x7C),
    (0x00,0x00,0xFC),
    (0x00,0x00,0xBC),
    (0x44,0x28,0xBC),
    (0x94,0x00,0x84),
    (0xA8,0x00,0x20),
    (0xA8,0x10,0x00),
    (0x88,0x14,0x00),
    (0x50,0x30,0x00),
    (0x00,0x78,0x00),
    (0x00,0x68,0x00),
    (0x00,0x58,0x00),
    (0x00,0x40,0x58),
    (0x00,0x00,0x00),
    (0x00,0x00,0x00),
    (0x00,0x00,0x00),
    (0xBC,0xBC,0xBC),
    (0x00,0x78,0xF8),
    (0x00,0x58,0xF8),
    (0x68,0x44,0xFC),
    (0xD8,0x00,0xCC),
    (0xE4,0x00,0x58),
    (0xF8,0x38,0x00),
    (0xE4,0x5C,0x10),
    (0xAC,0x7C,0x00),
    (0x00,0xB8,0x00),
    (0x00,0xA8,0x00),
    (0x00,0xA8,0x44),
    (0x00,0x88,0x88),
    (0x00,0x00,0x00),
    (0x00,0x00,0x00),
    (0x00,0x00,0x00),
    (0xF8,0xF8,0xF8),
    (0x3C,0xBC,0xFC),
    (0x68,0x88,0xFC),
    (0x98,0x78,0xF8),
    (0xF8,0x78,0xF8),
    (0xF8,0x58,0x98),
    (0xF8,0x78,0x58),
    (0xFC,0xA0,0x44),
    (0xF8,0xB8,0x00),
    (0xB8,0xF8,0x18),
    (0x58,0xD8,0x54),
    (0x58,0xF8,0x98),
    (0x00,0xE8,0xD8),
    (0x78,0x78,0x78),
    (0x00,0x00,0x00),
    (0x00,0x00,0x00),
    (0xFC,0xFC,0xFC),
    (0xA4,0xE4,0xFC),
    (0xB8,0xB8,0xF8),
    (0xD8,0xB8,0xF8),
    (0xF8,0xB8,0xF8),
    (0xF8,0xA4,0xC0),
    (0xF0,0xD0,0xB0),
    (0xFC,0xE0,0xA8),
    (0xF8,0xD8,0x78),
    (0xD8,0xF8,0x78),
    (0xB8,0xF8,0xB8),
    (0xB8,0xF8,0xD8),
    (0x00,0xFC,0xFC),
    (0xF8,0xD8,0xF8),
    (0x00,0x00,0x00),
    (0x00,0x00,0x00)]

false_rgbi_pallette = [

    (0,0,0),
    (255,0,0),
    (0,255,0),
    (0,0,255),
    (255,255,0),
    (255,0,255),
    (0,255,255),
    (255,255,255),
    (128,0,0),
    (0,128,0),
    (0,0,128),
    (128,128,0),
    (128,0,128),
    (0,128,128),
    (128,128,128)

]
true_rgbi_pallette = [

    (0,0,0),
    (170,0,0),
    (0,170,0),
    (0,0,170),
    (170,170,0),
    (170,0,170),
    (0,170,170),
    (170,170,170),
    (85,85,85),
    (255,85,85),
    (85,255,85),
    (85,85,255),
    (255,255,85),
    (255,85,255),
    (85,255,255),
    (255,255,255)

]
eight_color_palette = [

    (0,0,0),
    (255,0,0),
    (0,255,0),
    (0,0,255),
    (255,255,0),
    (255,0,255),
    (0,255,255),
    (255,255,255)

]
cga_composite_palette = [

    (0,0,0),
    (0,152,195),
    (0,80,215),
    (0,159,253),
	(67,24,0),
    (0,195,164),
    (77,122,186),
    (0,200,223),
    (203,0,53),
    (170,197,255),
    (230,117,255),
    (189,199,255),
    (255,68,0),
    (247,246,206),
    (255,161,229),
	(255,255,255)
]
apple_ii_low_color_pallette = [

    (0,0,0),
    (255,255,255),
    (27, 154, 254),
    (27,203,1),
    (228,101,1),
    (228, 52, 254)

]
one_bit_palette = [

    (0,0,0),
    (255,255,255),

]
two_bit_mono_palette = [

    (0,0,0),
    (85,85,85),
    (170,170,170),
    (255,255,255)

]

four_bit_mono_palette = [
	(0, 0, 0),
	(17, 17, 17),
	(34, 34, 34),
	(51, 51, 51),
	(68, 68, 68),
	(85, 85, 85),
	(102, 102, 102),
	(119, 119, 119),
	(136, 136, 136),
	(153, 153, 153),
	(170, 170, 170),
	(187, 187, 187),
	(204, 204, 204),
	(221, 221, 221),
	(238, 238, 238),
	(255, 255, 255)
]

ZXSpectrum_palette = [
    (0, 0, 0),
    (255, 0, 0),
    (0, 255, 0),
    (0, 0, 255),
    (255, 255, 0),
    (255, 0, 255),
    (0, 255, 255),
    (255, 255, 255),
    (215, 0, 0),
    (0, 215, 0),
    (0, 0, 215),
    (215, 215, 0),
    (215, 0, 215),
    (0, 215, 215),
    (215, 215, 215),

]
fake_gameboy_palette = [
	(0, 0, 0),
	(42, 85, 0),
	(85, 170, 0),
	(128, 255, 0)
]
commodore_64_palette = [
    (0, 0, 0),
    (255, 255, 255),
    (136, 0, 0),
    (170, 255, 238),
    (204, 68, 204),
    (0, 204, 85),
    (0, 0, 170),
    (238, 238, 119),
    (221, 136, 85),
    (102, 68, 0),
    (255, 119, 119),
    (51, 51, 51),
    (119, 119, 119),
    (170, 255, 102),
    (0, 136, 255),
    (187, 187, 187)
]

cga_rgbi_pallette_1 = [
    (0, 0, 0),
    (255, 85, 255),
    (85, 255, 255),
    (255, 255, 255)
]
cga_rgbi_pallette_0 = [
    (0, 0, 0),
    (255, 85, 85),
    (85, 255, 85),
    (255, 255, 85),
]
cga_rgbi_pallette_2 = [
    (0, 0, 0),
    (255, 85, 85),
    (85, 255, 255),
    (255, 255, 255),
]
virtual_boy_palette = [

    (0,0,0),
    (85,0,0),
    (170,0,0),
    (255,0,0)

]
one_color_at_a_time = [

    (255,0,0),
    (0,255,0),
    (0,0,255)
]
one_color_at_a_time_plus_black = [
    (0,0,0),
    (255,0,0),
    (0,255,0),
    (0,0,255)
]
one_color_at_a_time_plus_white = [
    (255,255,255),
    (255,0,0),
    (0,255,0),
    (0,0,255)
]
one_color_at_a_time_plus_black_and_white = [
    (0,0,0),
    (255,0,0),
    (0,255,0),
    (0,0,255),
    (255,255,255)
]
one_color_at_a_time_myc = [
    (0,0,0),
    (255,0,0),
    (0,255,0),
    (0,0,255),
    (255,255,255)
]
one_color_at_a_time_myc = [
    (255,255,0),
    (0,255,255),
    (255,0,255)
]
one_color_at_a_time_mycw = [
    (255,255,0),
    (0,255,255),
    (255,0,255),
    (255,255,255)
]
one_color_at_a_time_mycb = [
    (255,255,0),
    (0,255,255),
    (255,0,255),
    (0,0,0)
]
one_color_at_a_time_mycbw = [
    (255,255,0),
    (0,255,255),
    (255,0,255),
    (0,0,0),
    (255,255,255)
]
six_bit = [
	(0, 0, 0),
	(0, 0, 85),
	(0, 0, 170),
	(0, 0, 255),
	(0, 85, 0),
	(0, 85, 85),
	(0, 85, 170),
	(0, 85, 255),
	(0, 170, 0),
	(0, 170, 85),
	(0, 170, 170),
	(0, 170, 255),
	(0, 255, 0),
	(0, 255, 85),
	(0, 255, 170),
	(0, 255, 255),
	(85, 0, 0),
	(85, 0, 85),
	(85, 0, 170),
	(85, 0, 255),
	(85, 85, 0),
	(85, 85, 85),
	(85, 85, 170),
	(85, 85, 255),
	(85, 170, 0),
	(85, 170, 85),
	(85, 170, 170),
	(85, 170, 255),
	(85, 255, 0),
	(85, 255, 85),
	(85, 255, 170),
	(85, 255, 255),
	(170, 0, 0),
	(170, 0, 85),
	(170, 0, 170),
	(170, 0, 255),
	(170, 85, 0),
	(170, 85, 85),
	(170, 85, 170),
	(170, 85, 255),
	(170, 170, 0),
	(170, 170, 85),
	(170, 170, 170),
	(170, 170, 255),
	(170, 255, 0),
	(170, 255, 85),
	(170, 255, 170),
	(170, 255, 255),
	(255, 0, 0),
	(255, 0, 85),
	(255, 0, 170),
	(255, 0, 255),
	(255, 85, 0),
	(255, 85, 85),
	(255, 85, 170),
	(255, 85, 255),
	(255, 170, 0),
	(255, 170, 85),
	(255, 170, 170),
	(255, 170, 255),
	(255, 255, 0),
	(255, 255, 85),
	(255, 255, 170),
	(255, 255, 255)
]
three_level_palette=[
	(0, 0, 0),
	(0, 0, 127),
	(0, 0, 254),
	(0, 127, 0),
	(0, 127, 127),
	(0, 127, 254),
	(0, 254, 0),
	(0, 254, 127),
	(0, 254, 254),
	(127, 0, 0),
	(127, 0, 127),
	(127, 0, 254),
	(127, 127, 0),
	(127, 127, 127),
	(127, 127, 254),
	(127, 254, 0),
	(127, 254, 127),
	(127, 254, 254),
	(254, 0, 0),
	(254, 0, 127),
	(254, 0, 254),
	(254, 127, 0),
	(254, 127, 127),
	(254, 127, 254),
	(254, 254, 0),
	(254, 254, 127),
	(254, 254, 254)
]

Apple_ii_16_colors_palette = [
    (0,0,0),
    (108,41,64),
    (64,23,120),
    (217,60,240),
    (19,87,64),
    (128,128,128),
    (38,151,240),
    (191,180,248),
    (64,75,7),
    (217,104,15),
    (236, 168,191),
    (38,195,15),
    (191,202,135),
    (147,214,191),
    (255,255,255)


]
nine_bit_palette = [
	(0, 0, 0),
	(0, 0, 36),
	(0, 0, 72),
	(0, 0, 108),
	(0, 0, 144),
	(0, 0, 180),
	(0, 0, 216),
	(0, 0, 252),
	(0, 36, 0),
	(0, 36, 36),
	(0, 36, 72),
	(0, 36, 108),
	(0, 36, 144),
	(0, 36, 180),
	(0, 36, 216),
	(0, 36, 252),
	(0, 72, 0),
	(0, 72, 36),
	(0, 72, 72),
	(0, 72, 108),
	(0, 72, 144),
	(0, 72, 180),
	(0, 72, 216),
	(0, 72, 252),
	(0, 108, 0),
	(0, 108, 36),
	(0, 108, 72),
	(0, 108, 108),
	(0, 108, 144),
	(0, 108, 180),
	(0, 108, 216),
	(0, 108, 252),
	(0, 144, 0),
	(0, 144, 36),
	(0, 144, 72),
	(0, 144, 108),
	(0, 144, 144),
	(0, 144, 180),
	(0, 144, 216),
	(0, 144, 252),
	(0, 180, 0),
	(0, 180, 36),
	(0, 180, 72),
	(0, 180, 108),
	(0, 180, 144),
	(0, 180, 180),
	(0, 180, 216),
	(0, 180, 252),
	(0, 216, 0),
	(0, 216, 36),
	(0, 216, 72),
	(0, 216, 108),
	(0, 216, 144),
	(0, 216, 180),
	(0, 216, 216),
	(0, 216, 252),
	(0, 252, 0),
	(0, 252, 36),
	(0, 252, 72),
	(0, 252, 108),
	(0, 252, 144),
	(0, 252, 180),
	(0, 252, 216),
	(0, 252, 252),
	(36, 0, 0),
	(36, 0, 36),
	(36, 0, 72),
	(36, 0, 108),
	(36, 0, 144),
	(36, 0, 180),
	(36, 0, 216),
	(36, 0, 252),
	(36, 36, 0),
	(36, 36, 36),
	(36, 36, 72),
	(36, 36, 108),
	(36, 36, 144),
	(36, 36, 180),
	(36, 36, 216),
	(36, 36, 252),
	(36, 72, 0),
	(36, 72, 36),
	(36, 72, 72),
	(36, 72, 108),
	(36, 72, 144),
	(36, 72, 180),
	(36, 72, 216),
	(36, 72, 252),
	(36, 108, 0),
	(36, 108, 36),
	(36, 108, 72),
	(36, 108, 108),
	(36, 108, 144),
	(36, 108, 180),
	(36, 108, 216),
	(36, 108, 252),
	(36, 144, 0),
	(36, 144, 36),
	(36, 144, 72),
	(36, 144, 108),
	(36, 144, 144),
	(36, 144, 180),
	(36, 144, 216),
	(36, 144, 252),
	(36, 180, 0),
	(36, 180, 36),
	(36, 180, 72),
	(36, 180, 108),
	(36, 180, 144),
	(36, 180, 180),
	(36, 180, 216),
	(36, 180, 252),
	(36, 216, 0),
	(36, 216, 36),
	(36, 216, 72),
	(36, 216, 108),
	(36, 216, 144),
	(36, 216, 180),
	(36, 216, 216),
	(36, 216, 252),
	(36, 252, 0),
	(36, 252, 36),
	(36, 252, 72),
	(36, 252, 108),
	(36, 252, 144),
	(36, 252, 180),
	(36, 252, 216),
	(36, 252, 252),
	(72, 0, 0),
	(72, 0, 36),
	(72, 0, 72),
	(72, 0, 108),
	(72, 0, 144),
	(72, 0, 180),
	(72, 0, 216),
	(72, 0, 252),
	(72, 36, 0),
	(72, 36, 36),
	(72, 36, 72),
	(72, 36, 108),
	(72, 36, 144),
	(72, 36, 180),
	(72, 36, 216),
	(72, 36, 252),
	(72, 72, 0),
	(72, 72, 36),
	(72, 72, 72),
	(72, 72, 108),
	(72, 72, 144),
	(72, 72, 180),
	(72, 72, 216),
	(72, 72, 252),
	(72, 108, 0),
	(72, 108, 36),
	(72, 108, 72),
	(72, 108, 108),
	(72, 108, 144),
	(72, 108, 180),
	(72, 108, 216),
	(72, 108, 252),
	(72, 144, 0),
	(72, 144, 36),
	(72, 144, 72),
	(72, 144, 108),
	(72, 144, 144),
	(72, 144, 180),
	(72, 144, 216),
	(72, 144, 252),
	(72, 180, 0),
	(72, 180, 36),
	(72, 180, 72),
	(72, 180, 108),
	(72, 180, 144),
	(72, 180, 180),
	(72, 180, 216),
	(72, 180, 252),
	(72, 216, 0),
	(72, 216, 36),
	(72, 216, 72),
	(72, 216, 108),
	(72, 216, 144),
	(72, 216, 180),
	(72, 216, 216),
	(72, 216, 252),
	(72, 252, 0),
	(72, 252, 36),
	(72, 252, 72),
	(72, 252, 108),
	(72, 252, 144),
	(72, 252, 180),
	(72, 252, 216),
	(72, 252, 252),
	(108, 0, 0),
	(108, 0, 36),
	(108, 0, 72),
	(108, 0, 108),
	(108, 0, 144),
	(108, 0, 180),
	(108, 0, 216),
	(108, 0, 252),
	(108, 36, 0),
	(108, 36, 36),
	(108, 36, 72),
	(108, 36, 108),
	(108, 36, 144),
	(108, 36, 180),
	(108, 36, 216),
	(108, 36, 252),
	(108, 72, 0),
	(108, 72, 36),
	(108, 72, 72),
	(108, 72, 108),
	(108, 72, 144),
	(108, 72, 180),
	(108, 72, 216),
	(108, 72, 252),
	(108, 108, 0),
	(108, 108, 36),
	(108, 108, 72),
	(108, 108, 108),
	(108, 108, 144),
	(108, 108, 180),
	(108, 108, 216),
	(108, 108, 252),
	(108, 144, 0),
	(108, 144, 36),
	(108, 144, 72),
	(108, 144, 108),
	(108, 144, 144),
	(108, 144, 180),
	(108, 144, 216),
	(108, 144, 252),
	(108, 180, 0),
	(108, 180, 36),
	(108, 180, 72),
	(108, 180, 108),
	(108, 180, 144),
	(108, 180, 180),
	(108, 180, 216),
	(108, 180, 252),
	(108, 216, 0),
	(108, 216, 36),
	(108, 216, 72),
	(108, 216, 108),
	(108, 216, 144),
	(108, 216, 180),
	(108, 216, 216),
	(108, 216, 252),
	(108, 252, 0),
	(108, 252, 36),
	(108, 252, 72),
	(108, 252, 108),
	(108, 252, 144),
	(108, 252, 180),
	(108, 252, 216),
	(108, 252, 252),
	(144, 0, 0),
	(144, 0, 36),
	(144, 0, 72),
	(144, 0, 108),
	(144, 0, 144),
	(144, 0, 180),
	(144, 0, 216),
	(144, 0, 252),
	(144, 36, 0),
	(144, 36, 36),
	(144, 36, 72),
	(144, 36, 108),
	(144, 36, 144),
	(144, 36, 180),
	(144, 36, 216),
	(144, 36, 252),
	(144, 72, 0),
	(144, 72, 36),
	(144, 72, 72),
	(144, 72, 108),
	(144, 72, 144),
	(144, 72, 180),
	(144, 72, 216),
	(144, 72, 252),
	(144, 108, 0),
	(144, 108, 36),
	(144, 108, 72),
	(144, 108, 108),
	(144, 108, 144),
	(144, 108, 180),
	(144, 108, 216),
	(144, 108, 252),
	(144, 144, 0),
	(144, 144, 36),
	(144, 144, 72),
	(144, 144, 108),
	(144, 144, 144),
	(144, 144, 180),
	(144, 144, 216),
	(144, 144, 252),
	(144, 180, 0),
	(144, 180, 36),
	(144, 180, 72),
	(144, 180, 108),
	(144, 180, 144),
	(144, 180, 180),
	(144, 180, 216),
	(144, 180, 252),
	(144, 216, 0),
	(144, 216, 36),
	(144, 216, 72),
	(144, 216, 108),
	(144, 216, 144),
	(144, 216, 180),
	(144, 216, 216),
	(144, 216, 252),
	(144, 252, 0),
	(144, 252, 36),
	(144, 252, 72),
	(144, 252, 108),
	(144, 252, 144),
	(144, 252, 180),
	(144, 252, 216),
	(144, 252, 252),
	(180, 0, 0),
	(180, 0, 36),
	(180, 0, 72),
	(180, 0, 108),
	(180, 0, 144),
	(180, 0, 180),
	(180, 0, 216),
	(180, 0, 252),
	(180, 36, 0),
	(180, 36, 36),
	(180, 36, 72),
	(180, 36, 108),
	(180, 36, 144),
	(180, 36, 180),
	(180, 36, 216),
	(180, 36, 252),
	(180, 72, 0),
	(180, 72, 36),
	(180, 72, 72),
	(180, 72, 108),
	(180, 72, 144),
	(180, 72, 180),
	(180, 72, 216),
	(180, 72, 252),
	(180, 108, 0),
	(180, 108, 36),
	(180, 108, 72),
	(180, 108, 108),
	(180, 108, 144),
	(180, 108, 180),
	(180, 108, 216),
	(180, 108, 252),
	(180, 144, 0),
	(180, 144, 36),
	(180, 144, 72),
	(180, 144, 108),
	(180, 144, 144),
	(180, 144, 180),
	(180, 144, 216),
	(180, 144, 252),
	(180, 180, 0),
	(180, 180, 36),
	(180, 180, 72),
	(180, 180, 108),
	(180, 180, 144),
	(180, 180, 180),
	(180, 180, 216),
	(180, 180, 252),
	(180, 216, 0),
	(180, 216, 36),
	(180, 216, 72),
	(180, 216, 108),
	(180, 216, 144),
	(180, 216, 180),
	(180, 216, 216),
	(180, 216, 252),
	(180, 252, 0),
	(180, 252, 36),
	(180, 252, 72),
	(180, 252, 108),
	(180, 252, 144),
	(180, 252, 180),
	(180, 252, 216),
	(180, 252, 252),
	(216, 0, 0),
	(216, 0, 36),
	(216, 0, 72),
	(216, 0, 108),
	(216, 0, 144),
	(216, 0, 180),
	(216, 0, 216),
	(216, 0, 252),
	(216, 36, 0),
	(216, 36, 36),
	(216, 36, 72),
	(216, 36, 108),
	(216, 36, 144),
	(216, 36, 180),
	(216, 36, 216),
	(216, 36, 252),
	(216, 72, 0),
	(216, 72, 36),
	(216, 72, 72),
	(216, 72, 108),
	(216, 72, 144),
	(216, 72, 180),
	(216, 72, 216),
	(216, 72, 252),
	(216, 108, 0),
	(216, 108, 36),
	(216, 108, 72),
	(216, 108, 108),
	(216, 108, 144),
	(216, 108, 180),
	(216, 108, 216),
	(216, 108, 252),
	(216, 144, 0),
	(216, 144, 36),
	(216, 144, 72),
	(216, 144, 108),
	(216, 144, 144),
	(216, 144, 180),
	(216, 144, 216),
	(216, 144, 252),
	(216, 180, 0),
	(216, 180, 36),
	(216, 180, 72),
	(216, 180, 108),
	(216, 180, 144),
	(216, 180, 180),
	(216, 180, 216),
	(216, 180, 252),
	(216, 216, 0),
	(216, 216, 36),
	(216, 216, 72),
	(216, 216, 108),
	(216, 216, 144),
	(216, 216, 180),
	(216, 216, 216),
	(216, 216, 252),
	(216, 252, 0),
	(216, 252, 36),
	(216, 252, 72),
	(216, 252, 108),
	(216, 252, 144),
	(216, 252, 180),
	(216, 252, 216),
	(216, 252, 252),
	(252, 0, 0),
	(252, 0, 36),
	(252, 0, 72),
	(252, 0, 108),
	(252, 0, 144),
	(252, 0, 180),
	(252, 0, 216),
	(252, 0, 252),
	(252, 36, 0),
	(252, 36, 36),
	(252, 36, 72),
	(252, 36, 108),
	(252, 36, 144),
	(252, 36, 180),
	(252, 36, 216),
	(252, 36, 252),
	(252, 72, 0),
	(252, 72, 36),
	(252, 72, 72),
	(252, 72, 108),
	(252, 72, 144),
	(252, 72, 180),
	(252, 72, 216),
	(252, 72, 252),
	(252, 108, 0),
	(252, 108, 36),
	(252, 108, 72),
	(252, 108, 108),
	(252, 108, 144),
	(252, 108, 180),
	(252, 108, 216),
	(252, 108, 252),
	(252, 144, 0),
	(252, 144, 36),
	(252, 144, 72),
	(252, 144, 108),
	(252, 144, 144),
	(252, 144, 180),
	(252, 144, 216),
	(252, 144, 252),
	(252, 180, 0),
	(252, 180, 36),
	(252, 180, 72),
	(252, 180, 108),
	(252, 180, 144),
	(252, 180, 180),
	(252, 180, 216),
	(252, 180, 252),
	(252, 216, 0),
	(252, 216, 36),
	(252, 216, 72),
	(252, 216, 108),
	(252, 216, 144),
	(252, 216, 180),
	(252, 216, 216),
	(252, 216, 252),
	(252, 252, 0),
	(252, 252, 36),
	(252, 252, 72),
	(252, 252, 108),
	(252, 252, 144),
	(252, 252, 180),
	(252, 252, 216),
	(252, 252, 252)
]
six_level_rgb = [
	(0, 0, 0),
	(0, 0, 51),
	(0, 0, 102),
	(0, 0, 153),
	(0, 0, 204),
	(0, 0, 255),
	(0, 51, 0),
	(0, 51, 51),
	(0, 51, 102),
	(0, 51, 153),
	(0, 51, 204),
	(0, 51, 255),
	(0, 102, 0),
	(0, 102, 51),
	(0, 102, 102),
	(0, 102, 153),
	(0, 102, 204),
	(0, 102, 255),
	(0, 153, 0),
	(0, 153, 51),
	(0, 153, 102),
	(0, 153, 153),
	(0, 153, 204),
	(0, 153, 255),
	(0, 204, 0),
	(0, 204, 51),
	(0, 204, 102),
	(0, 204, 153),
	(0, 204, 204),
	(0, 204, 255),
	(0, 255, 0),
	(0, 255, 51),
	(0, 255, 102),
	(0, 255, 153),
	(0, 255, 204),
	(0, 255, 255),
	(51, 0, 0),
	(51, 0, 51),
	(51, 0, 102),
	(51, 0, 153),
	(51, 0, 204),
	(51, 0, 255),
	(51, 51, 0),
	(51, 51, 51),
	(51, 51, 102),
	(51, 51, 153),
	(51, 51, 204),
	(51, 51, 255),
	(51, 102, 0),
	(51, 102, 51),
	(51, 102, 102),
	(51, 102, 153),
	(51, 102, 204),
	(51, 102, 255),
	(51, 153, 0),
	(51, 153, 51),
	(51, 153, 102),
	(51, 153, 153),
	(51, 153, 204),
	(51, 153, 255),
	(51, 204, 0),
	(51, 204, 51),
	(51, 204, 102),
	(51, 204, 153),
	(51, 204, 204),
	(51, 204, 255),
	(51, 255, 0),
	(51, 255, 51),
	(51, 255, 102),
	(51, 255, 153),
	(51, 255, 204),
	(51, 255, 255),
	(102, 0, 0),
	(102, 0, 51),
	(102, 0, 102),
	(102, 0, 153),
	(102, 0, 204),
	(102, 0, 255),
	(102, 51, 0),
	(102, 51, 51),
	(102, 51, 102),
	(102, 51, 153),
	(102, 51, 204),
	(102, 51, 255),
	(102, 102, 0),
	(102, 102, 51),
	(102, 102, 102),
	(102, 102, 153),
	(102, 102, 204),
	(102, 102, 255),
	(102, 153, 0),
	(102, 153, 51),
	(102, 153, 102),
	(102, 153, 153),
	(102, 153, 204),
	(102, 153, 255),
	(102, 204, 0),
	(102, 204, 51),
	(102, 204, 102),
	(102, 204, 153),
	(102, 204, 204),
	(102, 204, 255),
	(102, 255, 0),
	(102, 255, 51),
	(102, 255, 102),
	(102, 255, 153),
	(102, 255, 204),
	(102, 255, 255),
	(153, 0, 0),
	(153, 0, 51),
	(153, 0, 102),
	(153, 0, 153),
	(153, 0, 204),
	(153, 0, 255),
	(153, 51, 0),
	(153, 51, 51),
	(153, 51, 102),
	(153, 51, 153),
	(153, 51, 204),
	(153, 51, 255),
	(153, 102, 0),
	(153, 102, 51),
	(153, 102, 102),
	(153, 102, 153),
	(153, 102, 204),
	(153, 102, 255),
	(153, 153, 0),
	(153, 153, 51),
	(153, 153, 102),
	(153, 153, 153),
	(153, 153, 204),
	(153, 153, 255),
	(153, 204, 0),
	(153, 204, 51),
	(153, 204, 102),
	(153, 204, 153),
	(153, 204, 204),
	(153, 204, 255),
	(153, 255, 0),
	(153, 255, 51),
	(153, 255, 102),
	(153, 255, 153),
	(153, 255, 204),
	(153, 255, 255),
	(204, 0, 0),
	(204, 0, 51),
	(204, 0, 102),
	(204, 0, 153),
	(204, 0, 204),
	(204, 0, 255),
	(204, 51, 0),
	(204, 51, 51),
	(204, 51, 102),
	(204, 51, 153),
	(204, 51, 204),
	(204, 51, 255),
	(204, 102, 0),
	(204, 102, 51),
	(204, 102, 102),
	(204, 102, 153),
	(204, 102, 204),
	(204, 102, 255),
	(204, 153, 0),
	(204, 153, 51),
	(204, 153, 102),
	(204, 153, 153),
	(204, 153, 204),
	(204, 153, 255),
	(204, 204, 0),
	(204, 204, 51),
	(204, 204, 102),
	(204, 204, 153),
	(204, 204, 204),
	(204, 204, 255),
	(204, 255, 0),
	(204, 255, 51),
	(204, 255, 102),
	(204, 255, 153),
	(204, 255, 204),
	(204, 255, 255),
	(255, 0, 0),
	(255, 0, 51),
	(255, 0, 102),
	(255, 0, 153),
	(255, 0, 204),
	(255, 0, 255),
	(255, 51, 0),
	(255, 51, 51),
	(255, 51, 102),
	(255, 51, 153),
	(255, 51, 204),
	(255, 51, 255),
	(255, 102, 0),
	(255, 102, 51),
	(255, 102, 102),
	(255, 102, 153),
	(255, 102, 204),
	(255, 102, 255),
	(255, 153, 0),
	(255, 153, 51),
	(255, 153, 102),
	(255, 153, 153),
	(255, 153, 204),
	(255, 153, 255),
	(255, 204, 0),
	(255, 204, 51),
	(255, 204, 102),
	(255, 204, 153),
	(255, 204, 204),
	(255, 204, 255),
	(255, 255, 0),
	(255, 255, 51),
	(255, 255, 102),
	(255, 255, 153),
	(255, 255, 204),
	(255, 255, 255)
]

Commodore_VIC_20 = [
	(0x00,0x00,0x00),
	(0xff,0xff,0xff),
	(0xa8,0x73,0x4a),
	(0xe9,0xb2,0x87),
	(0x77,0x2d, 0x26),
	(0xb6,0x68,0x62),
	(0x85,0xd4,0xdc),
	(0xc5,0xff,0xff),
	(0xa8,0x5f,0xb4),
	(0xe9,0x9d,0xf5),
	(0x55,0x9e,0x4a),
	(0x92,0xdf,0x87),
	(0x42,0x34,0x8b),
	(0x7e,0x70,0xca),
	(0xbd,0xcc,0x71),
	(0xff,0xff,0xb0)
]

three_color_mono = [
	(0, 0, 0),
	(128, 128, 128),
	(255, 255, 255),
]

RG_Color = [
    (0,0,0),
    (255,255,255),
    (255,0,0),
    (0,255,0),
    (128,128,128),
    (128,0,0),
    (0,128,0),


]

Windows_20_color = [
    (192, 192, 192),
    (192, 220, 192),
    (106,202,240),
    (255,251,240),
    (160,160,164),
    (0,0,0),
    (255,0,0),
    (0,255,0),
    (0,0,255),
    (255,255,0),
    (255,0,255),
    (0,255,255),
    (255,255,255),
    (128,0,0),
    (0,128,0),
    (0,0,128),
    (128,128,0),
    (128,0,128),
    (0,128,128),
    (128,128,128)

]

MSX1 = [
    (62,184,73),
    (116, 208, 125),
    (0,0,0),
    (89, 85, 224),
    (128, 118, 241),
    (185, 94, 81),
    (101, 219, 239),
    (219, 101, 89),
    (255, 137, 125),
    (204, 195, 94),
    (222,208, 135),
    (58, 162, 65),
    (183,  102, 181),
    (204, 204, 204),
    (255, 255, 255)
]

Macintosh_II = [
    (255,255,255),
    (255, 255, 0),
    (255,102,0),
    (221,0,0),
    (255, 0, 153),
    (51, 0, 153),
    (0, 0, 204),
    (0, 153, 255),
    (0, 170, 0),
    (102, 51, 0),
    (153, 102, 51),
    (187, 187, 187),
    (136, 136, 136),
    (68, 68, 68),
    (0,0,0)

]

RiscOS = [
    (255,255,255),
    (221, 221, 221),
    (187, 187, 187),
    (153, 153, 153),
    (119, 119, 119),
    (85, 85, 85),
    (51, 51, 51),
    (0, 0, 0),
    (0, 68,135),
    (238, 238, 0),
    (0, 204, 0),
    (221, 0, 0),
    (238, 238, 187),
    (85, 136, 0),
    (255, 187, 0),
    (0,187,255)
]

sepia_1_bit = [
    (112, 66, 20),
    (255, 255, 255)
]
teal_1_bit = [
    (0, 128, 128),
    (255, 255, 255)
]
rebecca_1_bit = [
    (102, 51, 153),
    (255, 255, 255)
]
gameboy_VC = [
    (107, 107, 83),
    (164, 164, 142),
    (42, 42, 21),
    (206, 206, 174)
]
paletteDict = {
    "nes_palette" : nes_palette,
    "false_rgbi_pallette" : false_rgbi_pallette,
    "true_rgbi_pallette" : true_rgbi_pallette,
    "eight_color_palette" : eight_color_palette,
    "apple_ii_low_color_pallette" : apple_ii_low_color_pallette,
    "one_bit_palette" : one_bit_palette,
    "two_bit_mono_palette" : two_bit_mono_palette,
    "four_bit_mono_palette" : four_bit_mono_palette,
    "ZXSpectrum_palette" : ZXSpectrum_palette,
    "fake_gameboy_palette" : fake_gameboy_palette,
    "commodore_64_palette" : commodore_64_palette,
    "cga_rgbi_pallette_1" : cga_rgbi_pallette_1,
    "cga_rgbi_pallette_0" : cga_rgbi_pallette_0,
	"cga_rgbi_pallette_2": cga_rgbi_pallette_2,
    "virtual_boy_palette" : virtual_boy_palette,
    "one_color_at_a_time" : one_color_at_a_time,
    "one_color_at_a_time_plus_black" : one_color_at_a_time_plus_black,
    "one_color_at_a_time_plus_white" : one_color_at_a_time_plus_white,
    "one_color_at_a_time_plus_black_and_white" : one_color_at_a_time_plus_black_and_white,
    "one_color_at_a_time_myc" : one_color_at_a_time_myc,
    "one_color_at_a_time_myc" : one_color_at_a_time_myc,
    "one_color_at_a_time_mycw" : one_color_at_a_time_mycw,
    "one_color_at_a_time_mycb" : one_color_at_a_time_mycb,
    "one_color_at_a_time_mycbw" : one_color_at_a_time_mycbw,
    "six_bit" : six_bit,
    "three_level_palette" : three_level_palette,
    "Apple_ii_16_colors_palette" : Apple_ii_16_colors_palette,
    "nine_bit_palette": nine_bit_palette,
	"six_level_rgb": six_level_rgb,
	"Commodore_VIC_20": Commodore_VIC_20,
	"cga_composite_palette": cga_composite_palette,
    "RG": RG_Color,
    "gameboy_VC": gameboy_VC,
    "teal_1_bit": teal_1_bit,
    "sepia_1_bit": sepia_1_bit,
    "AmstradRiscOS": RiscOS,
    "Macintosh_II": Macintosh_II,
    "MSX1": MSX1,
    "Windows_20_color": Windows_20_color,
    "rebecca_1_bit": rebecca_1_bit

}

class Dither():
    def __init__(self, path, algorithm=None, output=None, palette=eight_color_palette):
        self.path = self.get_path(path)
        self.algorithm = algorithm
        self.palette = palette
        self.output = output
        self.func = self.get_func(self.algorithm)
        self.func(self.path)


    def apply_threshold(self, value1):
        return self.apply_threshold_palette(self.palette, value1)
    def get_path(self, path):
        """Get whole path of an image

        If path does not start with '/', then try to open image from pwd
        If path starts with '/', then open image of given path
        """
        if path.startswith('/') and not path.startswith('~/'):
            return os.getcwd() + '/' + path
        else:
            return path

    def get_func(self, algorithm):
        "Get dithering function to run"
        return self.floyd_steinberg_dither

    def apply_threshold_orig(self, value):
        "Returns 0 or 255 depending where value is closer"
        return 255 * floor(value/128)
    def apply_threshold_orig_on_pixel(self, value):
        return (self.apply_threshold_orig(value[0]), self.apply_threshold_orig(value[1]), self.apply_threshold_orig(value[2]))
    def apply_threshold_nes(self, value):
        return self.apply_threshold_palette(nes_palette, value)

    def apply_threshold_palette(self, palette, value):
        curerror = 257 * 3
        curcolor = 0xff
        for color in palette:
            error = math.fabs(color[0] - value[0]) + math.fabs(color[1] - value[1]) + math.fabs(color[2] - value[2])
            if curerror > error:
                curerror=error
                curcolor = color
            if curerror == 0:
                return curcolor
        print(curcolor)
        return curcolor

    def error_calc(self, pixel1, pixel2):
        return (pixel1[0] - pixel2[0], pixel1[1] - pixel2[1], pixel1[2] - pixel2[2])
    def enhance_calc(self, pixel, error, ErrorSendValue):
        red = pixel[0] + round(error[0] * ErrorSendValue)
        green = pixel[1] + round(error[1] * ErrorSendValue)
        blue = pixel[2] + round(error[2] * ErrorSendValue)
        return (red, green, blue)
    def floyd_steinberg_dither(self, image_file):
        """
        https://en.wikipedia.org/wiki/Floyd–Steinberg_dithering

        Pseudocode:

        for each y from top to bottom
           for each x from left to right
              oldpixel  := pixel[x][y]
              newpixel  := find_closest_palette_color(oldpixel)
              pixel[x][y]  := newpixel
              quant_error  := oldpixel - newpixel
              pixel[x+1][y  ] := pixel[x+1][y  ] + quant_error * 7/16
              pixel[x-1][y+1] := pixel[x-1][y+1] + quant_error * 3/16
              pixel[x  ][y+1] := pixel[x  ][y+1] + quant_error * 5/16
              pixel[x+1][y+1] := pixel[x+1][y+1] + quant_error * 1/16

        find_closest_palette_color(oldpixel) = floor(oldpixel / 256)
        """

        new_img = Image.open(image_file)

        new_img = new_img.convert('RGB')
        pixel = new_img.load()

        x_lim, y_lim = new_img.size

        for y in range(1, y_lim):
            for x in range(1, x_lim):
                oldpixel = pixel[x,y]
                newpixel = self.apply_threshold(pixel[x, y])
                """green_newpixel = self.apply_threshold()
                blue_newpixel = self.apply_threshold(blue_oldpixel)"""

                pixel[x, y] = newpixel

                error = self.error_calc(oldpixel, newpixel)
                #blue_error = blue_oldpixel - blue_newpixel
                #green_error = green_oldpixel - green_newpixel

                if x < x_lim - 1:
                    pixel[x + 1, y] = self.enhance_calc(pixel[x+1, y], error, ErrorToRight)


                if x > 1 and y < y_lim - 1:
                    pixel[x - 1, y+1] = self.enhance_calc(pixel[x - 1, y+1], error, ErrorToBottomLeft)


                if y < y_lim - 1:
                    pixel[x, y + 1] = self.enhance_calc(pixel[x, y + 1], error, ErrorToBottom)

                if x < x_lim - 1 and y < y_lim - 1:
                    pixel[x + 1, y + 1] = self.enhance_calc(pixel[x+1, y + 1], error, ErrorToBottomRight)

                #pixel[x+1, y+1] = (red, green, blue)
        if isfunk:
            return new_img.save("tmp.bmp")
        elif self.output:
            new_img.save(self.output)
        else:
            new_img.show()



def main():
    """parser = ArgumentParser(description="Image dithering in python")
    parser.add_argument("image_path", help="input image location")
    parser.add_argument("-o", help="output image location")
    args = parser.parse_args()
    if args.image_path and not args.o:
        Dither(args.image_path)
    elif args.image_path and args.o:
        Dither(args.image_path, output=args.o)
    else:
        Dither(input(), output=input())"""
    folder = "D:\\Noam10\\Documents\\Documents\\dither 2"
    filename = "kirigiri"
    filetype = ".jpg"
    input_file = folder + "\\" + filename + filetype
    for palette in ["rebecca_1_bit"]:#paletteDict.keys():
        output_file = folder + "\\" + filename + "(" + palette + ").bmp"
        Dither(input_file, output=output_file, palette=paletteDict[palette])
        print(output_file)



main()
